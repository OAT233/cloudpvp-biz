server:
  port: 8082

spring:
  data:
    redis:
      host: 192.168.1.192
      repositories:
        enabled: true
      client-type: lettuce
#      cluster:
#        nodes:
#          - 192.168.1.192:6379
      timeout: 10000ms
      lettuce:
        pool:
          #最大连接数
          max-active : 8
          #最大连接阻塞等待时间，默认-1
          max-wait: 10000ms
          #最大空闲连接，默认8
          max-idle: 200
          #最小空闲连接，默认0
          min-idle: 5
  kafka:
    # kafka集群信息，多个用逗号间隔
    bootstrap-servers: 192.168.1.192:9092
    # 生产者
    producer:
      # 重试次数，设置大于0的值，则客户端会将发送失败的记录重新发送
      retries: 3
      #批量处理大小，16K
      batch-size: 16384
      #缓冲存储大，32M
      buffer-memory: 33554432
      acks: 1
      # 指定消息key和消息体的编码方式：字符串序列化
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    # 消费者
    consumer:
      # 消费者组
      group-id: TestGroup
      # 是否自动提交
      enable-auto-commit: false
      # 消费偏移配置
      # none：如果没有为消费者找到先前的offset的值,即没有自动维护偏移量,也没有手动维护偏移量,则抛出异常
      # earliest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从头开始消费
      # latest：在各分区下有提交的offset时：从offset处开始消费；在各分区下无提交的offset时：从最新的数据开始消费
      auto-offset-reset: latest
      # 指定消息key和消息体的解码方式：字符串反序列化
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonSerializer
    # 监听
    listener:
      # record：当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
      # batch：当每一批poll()的数据被ListenerConsumer处理之后提交
      # time：当每一批poll()的数据被ListenerConsumer处理之后，距离上次提交时间大于TIME时提交
      # count：当每一批poll()的数据被ListenerConsumer处理之后，被处理record数量大于等于COUNT时提交
      # count_time：TIME或COUNT中有一个条件满足时提交
      # manual：当每一批poll()的数据被ListenerConsumer处理之后, 手动调用Acknowledgment.acknowledge()后提交
      # manual_immediate：手动调用Acknowledgment.acknowledge()后立即提交，一般推荐使用这种
      ack-mode: manual_immediate


eureka:
  instance:
    instance-id: ${spring.application.name}
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/